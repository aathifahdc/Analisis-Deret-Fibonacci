#include <iostream>
#include <unordered_map>
#include <iomanip>
#include <chrono>
using namespace std;

int fibonacci_recursive(int n);

int main() {
    cout << "Fibonacci(10) = " << fibonacci_recursive(10) << endl;
    cout << "Fibonacci(25) = " << fibonacci_recursive(25) << endl;
    cout << "Fibonacci(30) = " << fibonacci_recursive(30) << endl;
    cout << "Fibonacci(40) = " << fibonacci_recursive(40) << endl;
    cout << "Fibonacci(50) = " << fibonacci_recursive(50) << endl;

    return 0;
}


std::unordered_map<int, int> memo;

int fibonacci_dynamic(int n) {
    if (n <= 1)
        return n;
    if (memo.find(n) != memo.end())
        return memo[n];
    memo[n] = fibonacci_dynamic(n-1) + fibonacci_dynamic(n-2);
    return memo[n];
}

int main() {
    int n_values[] = {10, 25, 30, 40, 50};

    for (int n : n_values) {
        std::cout << "Fibonacci(" << n << ") = " << fibonacci_dynamic(n) << std::endl;
    }

    return 0;
}

using namespace chrono;

int fibonacci_recursive(int n) {
    if (n <= 1)
        return n;
    else
        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2);
}

unordered_map<int, int> memo;
int fibonacci_dynamic(int n) {
    if (n <= 1)
        return n;
    if (memo.find(n) != memo.end())
        return memo[n];
    memo[n] = fibonacci_dynamic(n-1) + fibonacci_dynamic(n-2);
    return memo[n];
}

int main() {
    int values[] = {10, 25, 30, 40, 50};
    int num_values = sizeof(values) / sizeof(values[0]);

    cout << "-------------------------------------------------------------------\n";
    cout << "|   n   |  Recursive Approach (ms)  |  Dynamic Programming (ms)  |\n";
    cout << "-------------------------------------------------------------------\n";

    for (int i = 0; i < num_values; ++i) {
        int n = values[i];


        auto start_recursive = high_resolution_clock::now();
        int result_recursive = fibonacci_recursive(n);
        auto stop_recursive = high_resolution_clock::now();
        auto duration_recursive = duration_cast<milliseconds>(stop_recursive - start_recursive);

        auto start_dynamic = high_resolution_clock::now();
        int result_dynamic = fibonacci_dynamic(n);
        auto stop_dynamic = high_resolution_clock::now();
        auto duration_dynamic = duration_cast<milliseconds>(stop_dynamic - start_dynamic);

        cout << "| " << setw(5) << n << " | " << setw(26) << duration_recursive.count() << " | " << setw(25) << duration_dynamic.count() << " |\n";
    }

    cout << "-------------------------------------------------------------------\n";

    return 0;
}
